import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  # –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã
from .messages import send_main_menu
from telegram.ext import CallbackContext, CallbackQueryHandler
from src.config import config
from src.handlers.keyboards import (
    main_menu_keyboard,
    back_to_menu_keyboard,
    booking_keyboard
)

logger = logging.getLogger(__name__)

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    if query.data == 'prices':
        services = "\n".join([f"- {s}: {p}" for s, p in config['services'].items()]) if config['services'] else "–£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", url=config['booking_link'])],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        
        await query.edit_message_text(
            text=f"üéπ –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n{services}\n\n{config['booking_text']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == 'products':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏
        products_text = []  # –î–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = []       # –î–ª—è –∫–Ω–æ–ø–æ–∫
        
        for product in config['products']:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Å—ã–ª–∫–æ–π
            keyboard.append(
                [InlineKeyboardButton(product['name'], url=product['url'])]
            )
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
            products_text.append(f"‚Ä¢ {product['name']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
        )
        
        await query.edit_message_text(
            text="üéµ –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n" + "\n".join(products_text),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    elif query.data == 'info':
        info_text = "\n".join([f"- {title}: {content}" for title, content in config['info_content'].items()])
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back')]]
        await query.edit_message_text(
            text=f"‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info_text}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == 'back':
        await send_main_menu(query.from_user.id, context)

def get_callbacks_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫"""
    return [
        CallbackQueryHandler(button_handler)
    ]